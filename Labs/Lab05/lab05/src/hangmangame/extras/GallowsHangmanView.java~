package hangmangame.extras;

import cs102.hangman.*;
import javax.swing.*;
import java.awt.*;
import java.awt.geom.*;

public class GallowsHangmanView extends JPanel implements IHangmanView {
  
  private Rectangle2D.Double[] rectangle;
  private Line2D.Double[] bodyLines;
  private Ellipse2D.Double head;
  private Hangman hangman;
  private Shape[] man;
  private String knownSoFar;
  private String noOfTries;
  private String lettersUsed;
  
  //constants
  private static final int PANEL_HEIGHT = 300;
  private static final int WIDTH = 300;
  private static final int X = 0;
  private static final int Y = 50;
  //private static final Font font = new Font("Times New Roman", Font.BOLD, 50);
  
  public GallowsHangmanView(Hangman hangman) {
    super();
    this.hangman = hangman;//we keep a Hangman reference in paintComponent
    this.setBackground(Color.orange);
    
    //intializing the arrays for drawing
    rectangle = new Rectangle2D.Double[4];
    bodyLines = new Line2D.Double[5];
    man = new Shape[6];
    
    //initializng Strings for later use
    knownSoFar = "";
    noOfTries = "";
    lettersUsed = "";
    
    //making the initial gallow - storing them in rectangles
    rectangle[0] = (new Rectangle2D.Double(20 + X, 400 + Y, 300, 50));//bottom rectangle
    rectangle[1] = (new Rectangle2D.Double(60 + X, 40 + Y, 20, 360));//from bottom vertical
    rectangle[2] = (new Rectangle2D.Double(80 + X, 40 + Y, 120, 20));//top horizontal
    rectangle[3] = (new Rectangle2D.Double(194 + X, 60 + Y, 6, 30));//top vertical
    
    //making the stick human
    //making the head
    head = new Ellipse2D.Double(167 + X, 90 + Y, 60, 60);
    
    //rest of the body is based on the initial circle
    //the body
    bodyLines[0] = new Line2D.Double(head.getX() + (head.getWidth() / 2), 
                                    head.getY() + head.getHeight(), 
                                    head.getX() + (head.getWidth() / 2)
                                      ,head.getY() + head.getHeight() + 70);
    //leftLeg
    bodyLines[1] = new Line2D.Double(bodyLines[0].getX2(), bodyLines[0].getY2(), bodyLines[0].getX2() - 30, 
                                    bodyLines[0].getY2() + 60);
    //right leg
    bodyLines[2] = new Line2D.Double(bodyLines[0].getX2(), bodyLines[0].getY2(), bodyLines[0].getX2() + 30, 
                                    bodyLines[1].getY2()); 
    //left arm
    bodyLines[3] = new Line2D.Double(bodyLines[0].getX2(), 
                                    ((bodyLines[0].getY2() - bodyLines[0].getY1()) / 5) + bodyLines[0].getY1()
                                      , bodyLines[0].getX1() - 28, 
                                    ((bodyLines[0].getY2() - bodyLines[0].getY1()) / 4) + bodyLines[0].getY1() + 40);
    //right arm
    bodyLines[4] = new Line2D.Double(bodyLines[0].getX2(), bodyLines[3].getY1(), bodyLines[0].getX1() + 28, 
                                    bodyLines[3].getY2());
    
    //adding the stick human shapes to an array for easy use in paintComponent
    man[0] = head;
    for (int i = 1; i < man.length; i++) {
      man[i] = bodyLines[i - 1];
    }
  }
  
  //implementation of IHangmanView
  public void updateView(Hangman hangman) {
    //if the game is being played
    if ( !hangman.isGameOver() ) {
      knownSoFar = hangman.getKnownSoFar();//to display the secret word
      noOfTries = "Tries: " + hangman.getNumOfIncorrectTries(); //to display the number of incorrect noOfTries
      lettersUsed = "Used letters: " + hangman.getUsedLetters();//to display the words used so far
    }
    
    //if the game is over then
    else {
      //Lost message
      if ( hangman.hasLost() ){
        knownSoFar = "Oops";
        noOfTries = "You lost!";
        lettersUsed = "You used: " + hangman.getUsedLetters();
      }
      
      //Won message
      else {
        knownSoFar = "In " + hangman.getNumOfIncorrectTries();
        noOfTries = "Congratulations, you won!!";
        lettersUsed = "You used: " + hangman.getUsedLetters();
      }
    }
    repaint();//calling repaint to update the changes in the JPanel
  }
  
  @Override
  public void paintComponent(Graphics g) {
    super.paintComponent(g);
    Graphics2D newGraphics = (Graphics2D) g;//we're using this to draw shapes
    
    //drawing the gallow using rectangles
    newGraphics.setPaint(Color.black);
    for(int i = 0; i < rectangle.length; i++) {
      newGraphics.fill(rectangle[i]);
    }
    
    //drawing the man based on the game state
    for(int i = 0; i < hangman.getNumOfIncorrectTries(); i++) {
      newGraphics.draw(man[i]);
    }
    
    //changing the style to draw the text
    //newGraphics.setFont(font);
    newGraphics.setPaint(Color.blue);
    
    //drawing the strings. x,y cordinates are based on the rectangles drawn earlier
    newGraphics.drawString(knownSoFar, (int)rectangle[0].getX() + 20, (int)(rectangle[0].getY() + rectangle[0].getHeight()) + 60);
    newGraphics.drawString(lettersUsed, (int)rectangle[0].getX() + 20, (int)(rectangle[0].getY() + rectangle[0].getHeight()) + 120);
    newGraphics.drawString(noOfTries, (int)(rectangle[1].getX() + rectangle[1].getWidth()) + 15, (int)rectangle[0].getY() - 50);

  }
  
}